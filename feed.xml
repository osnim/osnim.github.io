



<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://osnim.github.io/</id><title>osnim</title><subtitle>안녕하세요 osnim 입니다. 현재 안드로이드 개발자, 웹 백엔드와 프론트엔드 개발자를 꿈꾸고 있습니다.</subtitle> <updated>2022-03-28T17:43:33+09:00</updated> <author> <name>osnim</name> <uri>https://osnim.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://osnim.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://osnim.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 osnim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>스프링 입문 23 - 8.AOP (1)</title><link href="https://osnim.github.io/posts/Inflearn-spring23/" rel="alternate" type="text/html" title="스프링 입문 23 - 8.AOP (1)" /><published>2022-03-22T13:56:00+09:00</published> <updated>2022-03-22T13:56:00+09:00</updated> <id>https://osnim.github.io/posts/Inflearn-spring23/</id> <content src="https://osnim.github.io/posts/Inflearn-spring23/" /> <author> <name>{"name"=>"osnim", "link"=>"https://github.com/osnim"}</name> </author> <category term="Back-end" /> <summary> AOP(Aspect Oriented Programming) AOP란 Aspect Oriented Programming의 약자로 관점 지향 프로그래밍이라고 합니다. 시간 측정 로직 먼저 AOP에 대한 자세한 설명을 바로 시작하지 않고 다음과 같은 상황을 가정해보겠습니다. 만약 모든 메소드의 호출시간을 측정하고 싶다면 어떻게 해야할까? 각 메서드 마다 System.currentTimeMillis() 를 이용하여 끝 - 시간을 계산하면 됩니다. 코드로 시간 측정 로직을 구현하면 다음과 같습니다. 예를 들어 join 메서드의 시간을 측정하고 싶다면 위와 같이 변경해야합니다. 위 코드의 문제점 만약 메서드가 약 몇 천 ~ 몇 만 단위로 커진다면 이렇게 코딩을 하는 것을 매우 ... </summary> </entry> <entry><title>스프링 입문 22 - 7.스프링 DB 접근 기술 (6)</title><link href="https://osnim.github.io/posts/Inflearn-spring22/" rel="alternate" type="text/html" title="스프링 입문 22 - 7.스프링 DB 접근 기술 (6)" /><published>2022-03-21T03:14:00+09:00</published> <updated>2022-03-21T03:14:00+09:00</updated> <id>https://osnim.github.io/posts/Inflearn-spring22/</id> <content src="https://osnim.github.io/posts/Inflearn-spring22/" /> <author> <name>{"name"=>"osnim", "link"=>"https://github.com/osnim"}</name> </author> <category term="Back-end" /> <summary> 스프링 데이터 JPA (Java Persistence API) 이전 강의를 통해서 스프링 부트와 JPA만 사용해도 개발 생산성이 많이 증가하는 것을 확인할 수 있었습니다. 추가로 스프링 데이터 JPA를 사용하면, 기존의 한계를 넘어 리포지토리 구현 클래스 없이 인터페이스만으로 개발을 할 수 있습니다. 개발해온 기본 CRUD 기능도 스프링 데이터 JPA가 모두 제공합니다. 따라서 개발자는 핵심 비즈니스 로직을 개발하는데, 집중할 수 있습니다. 주의할 점은 스프링 데이터 JPA는 JPA를 편리하게 사용하도록 도와주는 기술입니다. 따라서 JPA를 먼저 학습한 후에 스프링 데이터 JPA를 학습을 권장합니다. 스프링 데이터 JPA 회원 리포지토리 repository 폴더에 SpringDataJpaMem... </summary> </entry> <entry><title>스프링 입문 21 - 7.스프링 DB 접근 기술 (5)</title><link href="https://osnim.github.io/posts/Inflearn-spring21/" rel="alternate" type="text/html" title="스프링 입문 21 - 7.스프링 DB 접근 기술 (5)" /><published>2022-03-21T01:10:00+09:00</published> <updated>2022-03-21T01:10:00+09:00</updated> <id>https://osnim.github.io/posts/Inflearn-spring21/</id> <content src="https://osnim.github.io/posts/Inflearn-spring21/" /> <author> <name>{"name"=>"osnim", "link"=>"https://github.com/osnim"}</name> </author> <category term="Back-end" /> <summary> JPA (Java Persistence API) 이전 강의에서 순수 JDBC 에서 JDBC Template으로 변경해서 작성해야 하는 코드를 확 줄일 수 있었습니다. 하지만 아직까지 SQL은 직접 작성해야하는 단점이 있었습니다. JPA를 사용하면 SQL 쿼리도 JPA가 자동으로 처리를 해주어 개발 생산성을 크게 높일 수 있습니다. 마치 이전 MemoryMemberRepository에서 했던 것처럼 객체를 메모리에 넣듯이, JPA에 넣으면 JPA가 중간에 DB에 SQL 보내고, 데이터를 DB에서 가져오고 하는 것을 모두 처리해줍니다. JPA를 사용하면, SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전환을 할 수 있다. 라이브러리 추가 build.gradle 파일에 이전에 추가했... </summary> </entry> <entry><title>스프링 입문 20 - 7.스프링 DB 접근 기술 (4)</title><link href="https://osnim.github.io/posts/Inflearn-spring20/" rel="alternate" type="text/html" title="스프링 입문 20 - 7.스프링 DB 접근 기술 (4)" /><published>2022-03-20T02:33:00+09:00</published> <updated>2022-03-21T04:17:14+09:00</updated> <id>https://osnim.github.io/posts/Inflearn-spring20/</id> <content src="https://osnim.github.io/posts/Inflearn-spring20/" /> <author> <name>{"name"=>"osnim", "link"=>"https://github.com/osnim"}</name> </author> <category term="Back-end" /> <summary> 스프링 JdbcTemplate JdbcTemplate은 이전에 만들었던 순수 Jdbc와 동일한 환경설정을 하면 됩니다. 스프링 JdbcTemplate라이브러리는 JDBC API에서 본 connection 같은 반복적인 코드를 대부분 제거해줍니다. 하지만 SQL은 직접 작성해야 합니다. Template이라고 부르는 이유는 디자인 패턴중에 템플릿 메서드 패턴이라는 것이 있는데 그것이 많이 포함되어서 JdbcTemplate이라고 부릅니다. JdbcTemplate 회원 리포지토리 작성 jdbcTemplate는 injection을 받을 수는 없습니다. 대신 이전에 datasource injection 받은 것 처럼 파라미터에 DataSource dataSource를 넣어 jdbcTemplate 생성자를... </summary> </entry> <entry><title>스프링 입문 19 - 7.스프링 DB 접근 기술 (3)</title><link href="https://osnim.github.io/posts/Inflearn-spring19/" rel="alternate" type="text/html" title="스프링 입문 19 - 7.스프링 DB 접근 기술 (3)" /><published>2022-03-20T01:29:00+09:00</published> <updated>2022-03-20T01:29:00+09:00</updated> <id>https://osnim.github.io/posts/Inflearn-spring19/</id> <content src="https://osnim.github.io/posts/Inflearn-spring19/" /> <author> <name>{"name"=>"osnim", "link"=>"https://github.com/osnim"}</name> </author> <category term="Back-end" /> <summary> 스프링 통합 테스트 이번 시간은 이전 시간에 만든 DB와 스프링이 JDBC로 연결된 코드를 모두를 테스트 할 것입니다. 이전 코드를 살펴보면, 스프링과 관련 없는 자바 코드입니다. 하지만 이전 코드는 스프링이 직접 관리해주는 코드입니다. 따라서 이번 테스트는 스프링과 연관하여 진행해보겠습니다. 테스트 클래스 작성 이전에 만든 MemberServiceTest 클래스를 복사하여 MemberServiceIntegrationTest로 새로운 클래스를 생성합니다. 그 후 @SpringBootTest, @Transactional 을 추가합니다. @SpringBootTest : 스프링 컨테이너와 테스트를 함께 실행합니다. @Transactional : 테스트를 실행할 때, 트랜잭션을 먼저 실행하... </summary> </entry> </feed>
